---
title: "STAT 531 Portfolio"
author: "Tillman Erb"
date: "10/29/2024"
format: 
  html: 
    self-contained: true
    toc: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
code-fold: true
theme: darkly
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
#Lab 3 Question 2
evals <- read_csv(file = here::here("data","teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

-   `txt`

```{r}
#| label: wd-1-txt

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
# Lab 4 Question 5
income_cc <- ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_weekly_cc_price = median(mc_infant)) |>
  arrange(median_weekly_cc_price) |>
  inner_join(select(median_inc, -`2008`)) |> #Selecting all columns except "2008"
  rename(median_household_income =`2018`)

#Lab 3 Question 2
evals_cleaned <- evals |>
  select(course_id:SET_score_avg, 
         percent_failed_cur, 
         academic_degree:gender)
#Selected columns using a variety of syntaxes
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
#Lab 5 "Checking interviews for these two IDs"
witness_test <- interview |>
  filter(person_id %in% c(16371, 14887))
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#Lab 5 "Fitering Membership check in times"
membership_ids <- get_fit_now_check_in |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(check_in_date == ymd(20180109),
         str_detect(membership_id, "^48Z")) #Checking for a string that begins with "^48z"
```

-   factor

```{r}
#| label: wd-3-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

#Lab 5 Fitering Membership check in times
membership_ids <- get_fit_now_check_in |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(check_in_date == ymd(20180109), #Filtering for 1/9/2018, converting from int to datetime
         str_detect(membership_id, "^48Z"))

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric
#Challenge 3 Question 1
teacher_evals_compare <- evals |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(SET_score_avg >=4,
                             'excellent',
                             'standard'),
         sen_level = if_else(seniority <= 4,
                             'junior',
                             'senior'))

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor
#Lab 4 Question 6

plot_data <- ca_childcare |>
  select(county_name, region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "cc_type",
               values_to = "wkly_med_price"
              ) |>
  mutate(cc_type = fct_recode(cc_type,
      "Infant" = "mc_infant",
      "Toddler" = "mc_toddler",
      "Preschool" = "mc_preschool"))
#Recoding factors in a given column


```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#Lab 5 Fitering Membership check in times
membership_ids <- get_fit_now_check_in |>
  mutate(check_in_date = ymd(check_in_date)) #Mutating integer to date format using ymd() function 
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner
#Lab 4 Question 2
ca_childcare <- counties |>
  filter(state_abbreviation == 'CA') |>
  inner_join(childcare_costs)
```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#Lab 4 Question 6

plot_data <- ca_childcare |>
  select(county_name, region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "cc_type",
               values_to = "wkly_med_price"
              )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#Lab 4 Question 4

median_inc <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_household_income = median(mhi_2018)) |>
  pivot_wider(names_from = study_year, values_from = median_household_income) #pivoting wider here
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 4 Question 7
ca_childcare_2018 |>
  ggplot(mapping = aes(y = mc_infant,
                       x = mhi_2018)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Median Household Income ($) versus Median Weekly Infant
                Center-Based Childcare Price ($)",
       x = "2018 CA Regional Median Household Income ($)",
       y = NULL,
       subtitle = "2018 CA Regional Median Childcare Price ($)") +
  scale_x_continuous(labels = label_dollar()) + #https://scales.r-lib.org/reference/label_dollar.html
  scale_y_continuous(labels = label_dollar())
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Lab 2 Question 10

ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
geom_boxplot(outliers = FALSE) +
geom_jitter(color = 'steelblue', 
            'alpha' = 0.3
            ) +
labs(x = "Species of Animal",
     y = "Weight (g)"
) +
#https://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2
theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
#Challenge 2 'Spicy' Level

ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
geom_jitter(mapping = aes(color = genus), 
            'alpha' = 0.3
            ) +
geom_boxplot(outliers = FALSE) +
labs(x = "Species",
     y = "Weight (g)"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_colour_viridis_d()
```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date
#Lab 4 Question 6

ggplot(data = plot_data, mapping = aes(x = study_year, 
                                       y = wkly_med_price, 
                                       color = fct_reorder2(.f = region,
                                                            .x = study_year,
                                                            .y = wkly_med_price)
                                       )
       ) +
  geom_point() +
  geom_smooth(method = 'loess') +
  facet_grid(~ factor(cc_type, levels = c("Infant", "Toddler", "Preschool"))) +
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") + 
  scale_y_continuous(limits = c(0,500)) + #http://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels
  scale_x_continuous(breaks = seq.int(2008, 2018, by = 2))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
#Lab 2 Question 2
#Put y axis label as a subheader so people don't tilt their heads

ggplot(data = teacher_evals_compare, mapping = aes(x = sen_level,
                                                   fill = SET_level)) +
  geom_bar() +
  scale_fill_manual(values = c("#0072B2","#E69F00")) + #https://ggplot2.tidyverse.org/reference/scale_manual.html
  labs(x = "Seniority of Instructor",
     y = "",
     title = "Number of Sections",
     fill = 'SET Level' #https://stackoverflow.com/questions/14622421/how-to-change-legend-title-in-ggplot,
     )
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
#Challenge 2 Question 3
#Placed and changed size of genus labels to ensure readibility. See large annotate block towards end of snippet

ggplot(data = surveys,
       mapping = aes(y = species,
                     x = weight)) +
geom_jitter(mapping = aes(color = genus), 
            'alpha' = 0.3
            ) +
geom_boxplot(outliers = FALSE) +
labs(y = "Weight (g)",
     x = "Species"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_colour_viridis_d() +
  labs(x = "Weight (g)",
       y = "",
       subtitle = "Species",
       title = "Rodent Weight by Species") +
annotate("text", y = 2, x = 250, size = 3, label = "Chaetodipus") +
annotate("text", y = 13, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 1, x = 25, size = 3, label = "Neotoma") +
annotate("text", y = 14, x = 250, size = 3, label = "Onychomys") +
annotate("text", y = 4, x = 250, size = 3, label = "Perognathus") +
annotate("text", y = 3, x = 250, size = 3, label = "Peromyscus") +
annotate("text", y = 9, x = 250, size = 3, label = "Reithrodontomys") +
annotate("text", y = 6, x = 250, size = 3, label = "Sigmodon") + 
annotate("text", y = 5, x = 250, size = 3, label = "Reithrodontomys") +
annotate("text", y = 12, x = 250, size = 3, label = "Chaetodipus") +
annotate("text", y = 11, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 10, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 7, x = 250, size = 3, label = "Perognathus") +
annotate("text", y = 8, x = 250, size = 3, label = "Peromyscus")

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
#Lab 4 Question 6
#Used fct_reorder2 to reorder legend based off plot values

plot_data <- ca_childcare |>
  select(county_name, region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "cc_type",
               values_to = "wkly_med_price"
              ) |>
  mutate(cc_type = fct_recode(cc_type,
      "Infant" = "mc_infant",
      "Toddler" = "mc_toddler",
      "Preschool" = "mc_preschool"))

ggplot(data = plot_data, mapping = aes(x = study_year, 
                                       y = wkly_med_price, 
                                       color = fct_reorder2(.f = region,
                                                            .x = study_year,
                                                            .y = wkly_med_price)
                                       )
       )
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
#Challenge 2 Question 3
#Used scale_colour_viridis_d()

ggplot(data = surveys,
       mapping = aes(y = species,
                     x = weight)) +
geom_jitter(mapping = aes(color = genus), 
            'alpha' = 0.3
            ) +
geom_boxplot(outliers = FALSE) +
labs(y = "Weight (g)",
     x = "Species"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_colour_viridis_d()
```

-   I can use annotations

```{r}
#| label: dvs-3-2
#Challenge 2 Question 3
#See large annotate block towards end of snippet

ggplot(data = surveys,
       mapping = aes(y = species,
                     x = weight)) +
geom_jitter(mapping = aes(color = genus), 
            'alpha' = 0.3
            ) +
geom_boxplot(outliers = FALSE) +
labs(y = "Weight (g)",
     x = "Species"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_colour_viridis_d() +
  labs(x = "Weight (g)",
       y = "",
       subtitle = "Species",
       title = "Rodent Weight by Species") +
annotate("text", y = 2, x = 250, size = 3, label = "Chaetodipus") +
annotate("text", y = 13, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 1, x = 25, size = 3, label = "Neotoma") +
annotate("text", y = 14, x = 250, size = 3, label = "Onychomys") +
annotate("text", y = 4, x = 250, size = 3, label = "Perognathus") +
annotate("text", y = 3, x = 250, size = 3, label = "Peromyscus") +
annotate("text", y = 9, x = 250, size = 3, label = "Reithrodontomys") +
annotate("text", y = 6, x = 250, size = 3, label = "Sigmodon") + 
annotate("text", y = 5, x = 250, size = 3, label = "Reithrodontomys") +
annotate("text", y = 12, x = 250, size = 3, label = "Chaetodipus") +
annotate("text", y = 11, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 10, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 7, x = 250, size = 3, label = "Perognathus") +
annotate("text", y = 8, x = 250, size = 3, label = "Peromyscus")

```

-   I can be creative...

```{r}
#| label: dvs-3-3
#Based annotation position off of boxplot position to not obscure boxplots. Used custom color scale for distinuishment between species

ggplot(data = surveys,
       mapping = aes(y = species,
                     x = weight)) +
geom_jitter(mapping = aes(color = genus), 
            'alpha' = 0.3
            ) +
geom_boxplot(outliers = FALSE) +
labs(y = "Weight (g)",
     x = "Species"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_colour_viridis_d() +
  labs(x = "Weight (g)",
       y = "",
       subtitle = "Species",
       title = "Rodent Weight by Species") +
annotate("text", y = 2, x = 250, size = 3, label = "Chaetodipus") +
annotate("text", y = 13, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 1, x = 25, size = 3, label = "Neotoma") +
annotate("text", y = 14, x = 250, size = 3, label = "Onychomys") +
annotate("text", y = 4, x = 250, size = 3, label = "Perognathus") +
annotate("text", y = 3, x = 250, size = 3, label = "Peromyscus") +
annotate("text", y = 9, x = 250, size = 3, label = "Reithrodontomys") +
annotate("text", y = 6, x = 250, size = 3, label = "Sigmodon") + 
annotate("text", y = 5, x = 250, size = 3, label = "Reithrodontomys") +
annotate("text", y = 12, x = 250, size = 3, label = "Chaetodipus") +
annotate("text", y = 11, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 10, x = 250, size = 3, label = "Dipodomys") +
annotate("text", y = 7, x = 250, size = 3, label = "Perognathus") +
annotate("text", y = 8, x = 250, size = 3, label = "Peromyscus")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

Output: ![](images/clipboard-2400987150.png)

```{r}
#| label: dvs-6-1
#Lab 4 Question 5
income_cc <- ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_weekly_cc_price = median(mc_infant)) |>
  arrange(median_weekly_cc_price) |>
  inner_join(select(median_inc, -`2008`)) |>
  rename(median_household_income =`2018`)

income_cc
```

-   
-   Example 2

```{r}
#| label: dvs-6-2

```

DONE BELOW THIS DELETE BEFORE SUBMITTING

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2


```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
#Lab 4 Question 3
#Used mutate str_remove and fct_collapse inputs

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
        region = fct_collapse(county_name,
        "Superior California" = c("Butte", "El Dorado", "Colusa", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
        "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
        "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
        "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
        "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
        "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
        "Inland Empire" = c("Riverside", "San Bernardino"),
        "Los Angeles County" = "Los Angeles",
        "Orange County" = "Orange",
        "San Diego County" = c("Imperial", "San Diego")
        ), .before = state_abbreviation)
```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
#Lab 3 Question 7
#Modified orignal submission to include keyword arguments (such as .cols, .fns) for increased readibility
evals_cleaned |>
  filter(if_any(.cols = everything(), .fns = ~ is.na(.x)))

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 7
#Modified question to make the data wrangling pipeline connect directly to ggplot instead of storing a variable

ca_childcare |>
  filter(study_year == 2018) |>
  ggplot(mapping = aes(y = mc_infant,
                       x = mhi_2018)) +
  geom_point() +
  geom_smooth(method = "lm")
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

Analysis of output:

The estimated regression line is: $y = 0.0033x + 66.81$

In this equation, y represents the county-level median weekly infant center-based childcare price, whereas x represents the median household income for that county. The positive relationship shows that as MHI increases, so do childcare prices. Because of the low p-value, we know that this is a relationship with statistical significance.

```{r}
#| label: dsm-2-1
# Lab 4 Question 8

reg_mod1 <- lm(ca_childcare_2018$mc_infant ~ ca_childcare_2018$mhi_2018)
summary(reg_mod1)

```

-   Example 2

Analysis of output:

Based off a p value of approximately zero from the above one-way anova test, we reject the null hypothesis and conclude that at least one rodent species has a different mean weight.

```{r}
#| label: dsm-2-2
# Lab 2 Question 17

species_mod <- aov(data = surveys,
                   weight ~ species)

summary(species_mod)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
